def defaultVersionName = "v1.0.0"
def defaultVersionCode = 1
def isOpenLog = false

def log = { tag, msg ->
    if (isOpenLog) {
        println "$tag: $msg"
    }
}

def getCurrentBranch = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        def result = stdout.toString().trim()
        log("getCurrentBranch", result + "")
        return result
    } catch (ignored) {
        log("getCurrentBranch", "err: " + ignored.getMessage())
        return ''
    }
}

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', getCurrentBranch()
            standardOutput = stdout
        }
        def result = Integer.parseInt(stdout.toString().trim())
        log("getVersionCode", result + "")
        return result
    } catch (ignored) {
        log("getVersionCode", "err: " + ignored.getMessage())
        return defaultVersionCode
    }
}

/**
 * When upgrade version, we should create a new tag with git.
 * <bash> git tag -a v10.2.1 -m "you comments"</bash>
 * <h3> v10.2.0 description </h3>
 * <li> 10, the big version, can copy the android version </li>
 * <li> 2, sub version, if there is some function is changed, the sub version should add one,
 *      and the commit version should reset to zero.
 * </li>
 * <li> 1, commit version, BugId fixed should add one </li>
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0', '--always'
            standardOutput = stdout
        }
        def version = stdout.toString().trim()
        def result = version.startsWith("v") ? version : defaultVersionName
        log("getVersionName", result + "")
        return result
    } catch (ignored) {
        log("getVersionName", "err: " + ignored.getMessage())
        return defaultVersionName
    }
}

def versions = [:]
versions.version_code = getVersionCode()
versions.version_name = getVersionName().replace("v", "")
ext.versions = versions